-- Cargar la librer√≠a
local library = loadstring(game:HttpGet("https://raw.githubusercontent.com/memejames/elerium-v2-ui-library/main/Library", true))()

-- Servicios (sin repeticiones)
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local VirtualInputManager = game:GetService("VirtualInputManager")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local VirtualUser = game:GetService("VirtualUser")
local Workspace = game:GetService("Workspace")

-- Player
local player = Players.LocalPlayer
local LocalPlayer = Players.LocalPlayer

-- UI Window
local window = library:AddWindow("Sherya Script Free Version", {
    main_color = Color3.fromRGB(75, 0, 130),
    min_size = Vector2.new(600, 600),
    can_resize = false,
})

local mainTab = window:AddTab("Main")
local farmTab = window:AddTab("Farm")
local miscTab = window:AddTab("Misc")
local killerTab = window:AddTab("Killer")
local teleportTab = window:AddTab("Teleport")
local creditsTab = window:AddTab("Credits")

-- Auto Brawls Folder
local BrawlFolder = mainTab:AddFolder("  Auto Brawls")

local autoWinBrawl = BrawlFolder:AddSwitch("Auto Win Brawls", function(bool)
    getgenv().autoWinBrawl = bool

    local function equipPunch()
        if not getgenv().autoWinBrawl then return end

        local character = game.Players.LocalPlayer.Character
        if not character then return false end

        if character:FindFirstChild("Punch") then return true end

        local backpack = game.Players.LocalPlayer.Backpack
        if not backpack then return false end

        for _, tool in pairs(backpack:GetChildren()) do
            if tool.ClassName == "Tool" and tool.Name == "Punch" then
                tool.Parent = character
                return true
            end
        end
        return false
    end

    local function isValidTarget(player)
        if not player or not player.Parent then return false end
        if player == Players.LocalPlayer then return false end
        if whitelist and whitelist[player.UserId] then return false end

        local character = player.Character
        if not character or not character.Parent then return false end

        local humanoid = character:FindFirstChild("Humanoid")
        if not humanoid then return false end

        if not humanoid.Health or humanoid.Health <= 0 then return false end
        if humanoid:GetState() == Enum.HumanoidStateType.Dead then return false end

        local rootPart = character:FindFirstChild("HumanoidRootPart")
        if not rootPart or not rootPart.Parent then return false end

        return true
    end

    local function isLocalPlayerReady()
        local player = game.Players.LocalPlayer
        if not player then return false end

        local character = player.Character
        if not character or not character.Parent then return false end

        local humanoid = character:FindFirstChild("Humanoid")
        if not humanoid or humanoid.Health <= 0 then return false end

        local leftHand = character:FindFirstChild("LeftHand")
        local rightHand = character:FindFirstChild("RightHand")

        return (leftHand ~= nil or rightHand ~= nil)
    end

    local function safeTouchInterest(targetPart, localPart)
        if not targetPart or not targetPart.Parent then return false end
        if not localPart or not localPart.Parent then return false end

        local success, err = pcall(function()
            firetouchinterest(targetPart, localPart, 0)
            task.wait(0.01)
            firetouchinterest(targetPart, localPart, 1)
        end)

        return success
    end

    task.spawn(function()
        while getgenv().autoWinBrawl and task.wait(0.5) do
            if not getgenv().autoWinBrawl then break end

            if game.Players.LocalPlayer.PlayerGui.gameGui.brawlJoinLabel.Visible then
                game.ReplicatedStorage.rEvents.brawlEvent:FireServer("joinBrawl")
                game.Players.LocalPlayer.PlayerGui.gameGui.brawlJoinLabel.Visible = false
            end
        end
    end)

    task.spawn(function()
        while getgenv().autoWinBrawl and task.wait(0.5) do
            if not getgenv().autoWinBrawl then break end
            equipPunch()
        end
    end)

    task.spawn(function()
        while getgenv().autoWinBrawl and task.wait(0.1) do
            if not getgenv().autoWinBrawl then break end

            if isLocalPlayerReady() and game.ReplicatedStorage.brawlInProgress.Value then
                local player = game.Players.LocalPlayer
                pcall(function() player.muscleEvent:FireServer("punch", "rightHand") end)
                pcall(function() player.muscleEvent:FireServer("punch", "leftHand") end)
            end
        end
    end)

    task.spawn(function()
        while getgenv().autoWinBrawl and task.wait(0.05) do
            if not getgenv().autoWinBrawl then break end

            if isLocalPlayerReady() and game.ReplicatedStorage.brawlInProgress.Value then
                local character = game.Players.LocalPlayer.Character
                local leftHand = character:FindFirstChild("LeftHand")
                local rightHand = character:FindFirstChild("RightHand")

                for _, player in pairs(Players:GetPlayers()) do

                    if not getgenv().autoWinBrawl then break end

                    pcall(function()
                        if isValidTarget(player) then
                            local targetRoot = player.Character.HumanoidRootPart

                            if leftHand then
                                safeTouchInterest(targetRoot, leftHand)
                            end

                            if rightHand then
                                safeTouchInterest(targetRoot, rightHand)
                            end
                        end
                    end)

                    task.wait(0.01)
                end
            end
        end
    end)

    task.spawn(function()
        local lastPlayerCount = 0
        local stuckCounter = 0

        while getgenv().autoWinBrawl and task.wait(1) do
            if not getgenv().autoWinBrawl then break end

            local currentPlayerCount = #Players:GetPlayers()

            if currentPlayerCount ~= lastPlayerCount then
                stuckCounter = 0
                lastPlayerCount = currentPlayerCount
            else
                stuckCounter = stuckCounter + 1

                if stuckCounter > 5 then
                    stuckCounter = 0

                    pcall(function()
                        local character = game.Players.LocalPlayer.Character
                        if character and character:FindFirstChild("Punch") then
                            character.Punch.Parent = game.Players.LocalPlayer.Backpack
                            task.wait(0.1)
                            equipPunch()
                        else
                            equipPunch()
                        end
                    end)
                end
            end
        end
    end)
end)

BrawlFolder:AddSwitch("Auto Join Brawls", function(bool)
    getgenv().autoJoinBrawl = bool

    task.spawn(function()
        while getgenv().autoJoinBrawl and task.wait(0.5) do
            if not getgenv().autoJoinBrawl then break end

            if game.Players.LocalPlayer.PlayerGui.gameGui.brawlJoinLabel.Visible then
                game.ReplicatedStorage.rEvents.brawlEvent:FireServer("joinBrawl")
                game.Players.LocalPlayer.PlayerGui.gameGui.brawlJoinLabel.Visible = false
            end
        end
    end)
end)

-- Jungle Gym Folder
local jungleGymFolder = mainTab:AddFolder("  Jungle Gym")

local function pressE()
    VirtualInputManager:SendKeyEvent(true, "E", false, game)
    task.wait(0.1)
    VirtualInputManager:SendKeyEvent(false, "E", false, game)
end

local function autoLift()
    while getgenv().working do
        LocalPlayer.muscleEvent:FireServer("rep")
        task.wait()
    end
end

local function teleportAndStart(machineName, position)
    local character = LocalPlayer.Character
    if character and character:FindFirstChild("HumanoidRootPart") then
        character.HumanoidRootPart.CFrame = position
        task.wait(0.1)
        pressE()
        task.spawn(autoLift)
    end
end

jungleGymFolder:AddSwitch("Jungle Bench Press", function(bool)
    if getgenv().working and not bool then
        getgenv().working = false
        return
    end
    
    getgenv().working = bool
    if bool then
        teleportAndStart("Bench Press", CFrame.new(-8173, 64, 1898))
    end
end)

jungleGymFolder:AddSwitch("Jungle Squat", function(bool)
    if getgenv().working and not bool then
        getgenv().working = false
        return
    end
    
    getgenv().working = bool
    if bool then
        teleportAndStart("Squat", CFrame.new(-8352, 34, 2878))
    end
end)

jungleGymFolder:AddSwitch("Jungle Pull Ups", function(bool)
    if getgenv().working and not bool then
        getgenv().working = false
        return
    end
    
    getgenv().working = bool
    if bool then
        teleportAndStart("Pull Up", CFrame.new(-8666, 34, 2070))
    end
end)

jungleGymFolder:AddSwitch("Jungle Boulder", function(bool)
    if getgenv().working and not bool then
        getgenv().working = false
        return
    end
    
    getgenv().working = bool
    if bool then
        teleportAndStart("Boulder", CFrame.new(-8621, 34, 2684))
    end
end)

-- All Gyms Folder
local farmGymsFolder = mainTab:AddFolder("  All Gyms")

local workoutPositions = {
    ["Bench Press"] = {
        ["Eternal Gym"] = CFrame.new(-7176.19141, 45.394104, -1106.31421),
        ["Legend Gym"] = CFrame.new(4111.91748, 1020.46674, -3799.97217),
        ["Muscle King Gym"] = CFrame.new(-8590.06152, 46.0167427, -6043.34717)
    },
    ["Squat"] = {
        ["Eternal Gym"] = CFrame.new(-7176.19141, 45.394104, -1106.31421),
        ["Legend Gym"] = CFrame.new(4304.99023, 987.829956, -4124.2334),
        ["Muscle King Gym"] = CFrame.new(-8940.12402, 13.1642084, -5699.13477)
    },
    ["Deadlift"] = {
        ["Eternal Gym"] = CFrame.new(-7176.19141, 45.394104, -1106.31421),
        ["Legend Gym"] = CFrame.new(4304.99023, 987.829956, -4124.2334),
        ["Muscle King Gym"] = CFrame.new(-8940.12402, 13.1642084, -5699.13477)
    },
    ["Pull Up"] = {
        ["Eternal Gym"] = CFrame.new(-7176.19141, 45.394104, -1106.31421),
        ["Legend Gym"] = CFrame.new(4304.99023, 987.829956, -4124.2334),
        ["Muscle King Gym"] = CFrame.new(-8940.12402, 13.1642084, -5699.13477)
    }
}

local workoutTypes = {
    "Bench Press",
    "Squat",
    "Deadlift",
    "Pull Up"
}

local gymLocations = {
    "Eternal Gym",
    "Legend Gym",
    "Muscle King Gym"
}

local workoutTranslations = {
    ["Bench Press"] = "Bench Press",
    ["Squat"] = "Squat",
    ["Deadlift"] = "Dead Lift",
    ["Pull Up"] = "Pull Up"
}

local gymToggles = {}

for _, workoutType in ipairs(workoutTypes) do
    local dropdownName = workoutType .. "GymDropdown"
    local spanishWorkoutName = workoutTranslations[workoutType]
    
    local dropdown = farmGymsFolder:AddDropdown(spanishWorkoutName .. " - Gym", function(selected)
        _G["selected" .. string.gsub(workoutType, " ", "") .. "Gym"] = selected
    end)
    
    for _, gymName in ipairs(gymLocations) do
        dropdown:Add(gymName)
    end
    
    local toggleName = workoutType .. "GymToggle"
    local toggle = farmGymsFolder:AddSwitch(spanishWorkoutName, function(bool)
        getgenv().workingGym = bool
        getgenv().currentWorkoutType = workoutType
        
        if bool then
            local selectedGym = _G["selected" .. string.gsub(workoutType, " ", "") .. "Gym"] or gymLocations[1]
            
            if workoutPositions[workoutType] and workoutPositions[workoutType][selectedGym] then
                for otherType, otherToggle in pairs(gymToggles) do
                    if otherType ~= workoutType and otherToggle then
                        otherToggle:Set(false)
                    end
                end
                
                teleportAndStart(workoutType, workoutPositions[workoutType][selectedGym])
            end
        end
    end)
    
    gymToggles[workoutType] = toggle
end

-- Auto Snack Folder
local autoSnackFolder = mainTab:AddFolder("  Auto Snack")

local activeSnacks = {
    ["Protein Shake"] = false,
    ["Energy Shake"] = false,
    ["TOUGH Bar"] = false,
    ["ULTRA Shake"] = false,
    ["Energy Bar"] = false,
}

local snackConnections = {}

local function equipAndUse(itemName)
    local character = player.Character
    local backpack = player.Backpack
    
    if not character or not backpack then return end
    
    local tool = backpack:FindFirstChild(itemName)
    
    if tool then
        tool.Parent = character
        task.wait(0.1)
        
        local equippedTool = character:FindFirstChild(itemName)
        if equippedTool then
            equippedTool:Activate()
            
            local viewportSize = workspace.CurrentCamera.ViewportSize
            local x, y = viewportSize.X / 2, viewportSize.Y / 2
            VirtualInputManager:SendMouseButtonEvent(x, y, 0, true, game, 1)
            task.wait(0.01)
            VirtualInputManager:SendMouseButtonEvent(x, y, 0, false, game, 1)
        end
    end
end

local function startSnackLoop(itemName)
    if snackConnections[itemName] then
        snackConnections[itemName]:Disconnect()
        snackConnections[itemName] = nil
    end
    
    snackConnections[itemName] = task.spawn(function()
        while activeSnacks[itemName] do
            local backpack = player.Backpack
            
            if backpack and backpack:FindFirstChild(itemName) then
                equipAndUse(itemName)
                task.wait(0.5)
            else
                activeSnacks[itemName] = false
                print("No more " .. itemName .. " available!")
                break
            end
            
            task.wait(0.1)
        end
    end)
end

local function stopSnackLoop(itemName)
    if snackConnections[itemName] then
        task.cancel(snackConnections[itemName])
        snackConnections[itemName] = nil
    end
end

autoSnackFolder:AddSwitch("Protein Shake", function(state)
    activeSnacks["Protein Shake"] = state
    if state then
        startSnackLoop("Protein Shake")
    else
        stopSnackLoop("Protein Shake")
    end
end)

autoSnackFolder:AddSwitch("Energy Shake", function(state)
    activeSnacks["Energy Shake"] = state
    if state then
        startSnackLoop("Energy Shake")
    else
        stopSnackLoop("Energy Shake")
    end
end)

autoSnackFolder:AddSwitch("Tough Bar", function(state)
    activeSnacks["TOUGH Bar"] = state
    if state then
        startSnackLoop("TOUGH Bar")
    else
        stopSnackLoop("TOUGH Bar")
    end
end)

autoSnackFolder:AddSwitch("Ultra Shake", function(state)
    activeSnacks["ULTRA Shake"] = state
    if state then
        startSnackLoop("ULTRA Shake")
    else
        stopSnackLoop("ULTRA Shake")
    end
end)

autoSnackFolder:AddSwitch("Energy Bar", function(state)
    activeSnacks["Energy Bar"] = state
    if state then
        startSnackLoop("Energy Bar")
    else
        stopSnackLoop("Energy Bar")
    end
end)

player.AncestryChanged:Connect(function()
    if not player.Parent then
        for itemName, connection in pairs(snackConnections) do
            if connection then
                task.cancel(connection)
            end
        end
        snackConnections = {}
    end
end)

-- Extras Folder
local MSCCFolder = mainTab:AddFolder("  Extras")

MSCCFolder:AddSwitch("Lock Position", function(state)
    local character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
    local rootPart = character:FindFirstChild("HumanoidRootPart")

    if rootPart then
        rootPart.Anchored = state
    end
end)

MSCCFolder:AddSwitch("Anti Knockback", function(Value)
    if Value then
        local playerName = game.Players.LocalPlayer.Name
        local rootPart = game.Workspace:FindFirstChild(playerName):FindFirstChild("HumanoidRootPart")
        local bodyVelocity = Instance.new("BodyVelocity")
        bodyVelocity.MaxForce = Vector3.new(100000, 0, 100000)
        bodyVelocity.Velocity = Vector3.new(0, 0, 0)
        bodyVelocity.P = 1250
        bodyVelocity.Parent = rootPart
    else
        local playerName = game.Players.LocalPlayer.Name
        local rootPart = game.Workspace:FindFirstChild(playerName):FindFirstChild("HumanoidRootPart")
        local existingVelocity = rootPart:FindFirstChild("BodyVelocity")
        if existingVelocity and existingVelocity.MaxForce == Vector3.new(100000, 0, 100000) then
            existingVelocity:Destroy()
        end
    end
end)

MSCCFolder:AddButton("Anti AFK", function()
    game:GetService("StarterGui"):SetCore("SendNotification", {
        Title = "Anti AFK",
        Text = "Anti AFK se ha activado correctamente!",
        Duration = 3,
        Button1 = "OK"
    })
    
    local GC = getconnections or get_signal_cons
    if GC then
        for i, v in pairs(GC(game.Players.LocalPlayer.Idled)) do
            if v["Disable"] then
                v["Disable"](v)
            elseif v["Disconnect"] then
                v["Disconnect"](v)
            end
        end
    else
        local VirtualUser = game:GetService("VirtualUser")
        game:GetService("Players").LocalPlayer.Idled:Connect(function()
            VirtualUser:CaptureController()
            VirtualUser:ClickButton2(Vector2.new())
        end)
    end
    
    spawn(function()
        while wait(30) do
            local VirtualUser = game:GetService("VirtualUser")
            VirtualUser:CaptureController()
            VirtualUser:ClickButton2(Vector2.new())
        end
    end)
end)

-- Auto Rock Folder
local autoRockFolder = farmTab:AddFolder("  Auto Rock")

function gettool()
    for i, v in pairs(LocalPlayer.Backpack:GetChildren()) do
        if v.Name == "Punch" and LocalPlayer.Character:FindFirstChild("Humanoid") then
            LocalPlayer.Character.Humanoid:EquipTool(v)
        end
    end
    LocalPlayer.muscleEvent:FireServer("punch", "leftHand")
    LocalPlayer.muscleEvent:FireServer("punch", "rightHand")
end

local function createRockSwitch(name, selectRockName, durabilityRequirement)
    autoRockFolder:AddSwitch(name, function(Value)
        selectrock = selectRockName
        getgenv().autoFarm = Value
        
        task.spawn(function()
            while getgenv().autoFarm do
                if not getgenv().autoFarm then break end
                
                if LocalPlayer.Durability.Value >= durabilityRequirement then
                    local character = LocalPlayer.Character
                    if character and character:FindFirstChild("LeftHand") and character:FindFirstChild("RightHand") then
                        for i, v in pairs(Workspace.machinesFolder:GetDescendants()) do
                            if v.Name == "neededDurability" and v.Value == durabilityRequirement then
                                local rock = v.Parent.Rock
                                firetouchinterest(rock, character.RightHand, 0)
                                firetouchinterest(rock, character.RightHand, 1)
                                firetouchinterest(rock, character.LeftHand, 0)
                                firetouchinterest(rock, character.LeftHand, 1)
                                gettool()
                                break
                            end
                        end
                    end
                end
                task.wait()
            end
        end)
    end)
end

createRockSwitch("Tiny Rock", "Tiny Island Rock", 0)
createRockSwitch("Starter Rock", "Starter Island Rock", 100)
createRockSwitch("Legend Beach Rock", "Legend Beach Rock", 5000)
createRockSwitch("Frozen Rock", "Frost Gym Rock", 150000)
createRockSwitch("Mythical Rock", "Mythical Gym Rock", 400000)
createRockSwitch("Eternal Rock", "Eternal Gym Rock", 750000)
createRockSwitch("Legend Rock", "Legend Gym Rock", 1000000)
createRockSwitch("Muscle King Rock", "Muscle King Gym Rock", 5000000)
createRockSwitch("Jungle Rock", "Ancient Jungle Rock", 10000000)

-- Auto Tools Folder
local autoEquipToolsFolder = farmTab:AddFolder("  Auto Tools")

autoEquipToolsFolder:AddButton("Gamepass AutoLift", function()
    local gamepassFolder = game:GetService("ReplicatedStorage").gamepassIds
    local player = game:GetService("Players").LocalPlayer
    for _, gamepass in pairs(gamepassFolder:GetChildren()) do
        local value = Instance.new("IntValue")
        value.Name = gamepass.Name
        value.Value = gamepass.Value
        value.Parent = player.ownedGamepasses
    end
end)

local function createAutoToolSwitch(toolName, globalVar)
    autoEquipToolsFolder:AddSwitch("Auto " .. toolName, function(Value)
        _G[globalVar] = Value
        
        if Value then
            local tool = LocalPlayer.Backpack:FindFirstChild(toolName)
            if tool then
                LocalPlayer.Character.Humanoid:EquipTool(tool)
            end
        else
            local character = LocalPlayer.Character
            local equipped = character:FindFirstChild(toolName)
            if equipped then
                equipped.Parent = LocalPlayer.Backpack
            end
        end
        
        task.spawn(function()
            while _G[globalVar] do
                if not _G[globalVar] then break end
                LocalPlayer.muscleEvent:FireServer("rep")
                task.wait(0.1)
            end
        end)
    end)
end

createAutoToolSwitch("Weight", "AutoWeight")
createAutoToolSwitch("Pushups", "AutoPushups")
createAutoToolSwitch("Handstands", "AutoHandstands")
createAutoToolSwitch("Situps", "AutoSitups")

autoEquipToolsFolder:AddSwitch("Auto Punch", function(Value)
    _G.fastHitActive = Value
    
    if Value then
        task.spawn(function()
            while _G.fastHitActive do
                if not _G.fastHitActive then break end
                
                local punch = LocalPlayer.Backpack:FindFirstChild("Punch")
                if punch then
                    punch.Parent = LocalPlayer.Character
                    if punch:FindFirstChild("attackTime") then
                        punch.attackTime.Value = 0
                    end
                end
                task.wait(0.1)
            end
        end)
        
        task.spawn(function()
            while _G.fastHitActive do
                if not _G.fastHitActive then break end
                
                LocalPlayer.muscleEvent:FireServer("punch", "rightHand")
                LocalPlayer.muscleEvent:FireServer("punch", "leftHand")
                
                local character = LocalPlayer.Character
                if character then
                    local punchTool = character:FindFirstChild("Punch")
                    if punchTool then
                        punchTool:Activate()
                    end
                end
                task.wait()
            end
        end)
    else
        local character = LocalPlayer.Character
        local equipped = character:FindFirstChild("Punch")
        if equipped then
            equipped.Parent = LocalPlayer.Backpack
        end
    end
end)

autoEquipToolsFolder:AddSwitch("Fast Tools", function(Value)
    _G.FastTools = Value
    
    local toolSettings = {
        {"Punch", "attackTime", Value and 0 or 0.35},
        {"Ground Slam", "attackTime", Value and 0 or 6},
        {"Stomp", "attackTime", Value and 0 or 7},
        {"Handstands", "repTime", Value and 0 or 1},
        {"Pushups", "repTime", Value and 0 or 1},
        {"Weight", "repTime", Value and 0 or 1},
        {"Situps", "repTime", Value and 0 or 1}
    }
    
    local backpack = LocalPlayer:WaitForChild("Backpack")
    
    for _, toolInfo in ipairs(toolSettings) do
        local tool = backpack:FindFirstChild(toolInfo[1])
        if tool and tool:FindFirstChild(toolInfo[2]) then
            tool[toolInfo[2]].Value = toolInfo[3]
        end
        
        local equippedTool = LocalPlayer.Character and LocalPlayer.Character:FindFirstChild(toolInfo[1])
        if equippedTool and equippedTool:FindFirstChild(toolInfo[2]) then
            equippedTool[toolInfo[2]].Value = toolInfo[3]
        end
    end
end)

-- Auto Rebirths Folder
local Rebirth = farmTab:AddFolder("  Auto Rebirths")

local targetRebirthAmount = 1

Rebirth:AddTextBox("Target Rebirth Amount", function(value)
    local amount = tonumber(value) or 1
    local currentRebirths = leaderstats.Rebirths.Value
    if amount >= currentRebirths then
        targetRebirthAmount = amount
    end
end, {clear = false})

-- Target Rebirth Toggle
local targetRebirthToggle = Rebirth:AddSwitch("Target Rebirth", function(enabled)
    if enabled then
        task.spawn(function()
            while enabled do
                local currentRebirths = leaderstats.Rebirths.Value
                local requiredStrength = 10000 + 5000 * currentRebirths
                
                if currentRebirths >= targetRebirthAmount then
                    targetRebirthToggle:Set(false)
                    break
                end
                
                if leaderstats.Strength.Value >= requiredStrength then
                    replicatedStorage.rEvents.rebirthRemote:InvokeServer("rebirthRequest")
                    task.wait(0.7)
                else
                    -- Auto strength farm while waiting
                    for i = 1, repSpeed do
                        MuscleEvent:FireServer("rep")
                    end
                end
                
                task.wait(0.1)
            end
        end)
    end
end)

local autoRebirth = false

Rebirth:AddSwitch("Auto Rebirth (infinite)", function(state)
    autoRebirth = state
    while autoRebirth do
        game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("rebirthRemote"):InvokeServer("rebirthRequest")
        task.wait(0.1)
    end
end)

local teleportLoop

Rebirth:AddSwitch("Auto Teleport King", function(state)
    if state then
        teleportLoop = task.spawn(function()
            while task.wait(0) do
                local player = game.Players.LocalPlayer
                if player.Character then
                    player.Character:MoveTo(Vector3.new(-8646, 17, -5738))
                end
            end
        end)
    else
        if teleportLoop then
            task.cancel(teleportLoop)
            teleportLoop = nil
        end
    end
end)

local autoSizeLoop = nil
Rebirth:AddSwitch("Auto Size 2", function(state)
    if state then
        autoSizeLoop = task.spawn(function()
            while task.wait(0) do
                game:GetService("ReplicatedStorage").rEvents.changeSpeedSizeRemote:InvokeServer("changeSize", 2)
            end
        end)
    else
        if autoSizeLoop then
            task.cancel(autoSizeLoop)
            autoSizeLoop = nil
        end
    end
end)

local autoToggle = false

local function equipWeight()
    local character = player.Character
    if not character then
        warn("Auto Equip - No character found!")
        return false
    end

    local equippedWeight = character:FindFirstChild("Weight")
    if equippedWeight then
        print("Auto Equip - Weight already equipped!")
        return true
    end

    local weightTool = player.Backpack:FindFirstChild("Weight")
    if not weightTool then
        warn("Auto Equip - Weight not found in Backpack!")
        return false
    end

    weightTool.Parent = character
    task.wait(0.1)
    if character:FindFirstChild("Weight") then
        print("Auto Equip - Equipped Weight!")
        return true
    else
        warn("Auto Equip - Failed to equip Weight!")
        return false
    end
end

Rebirth:AddSwitch("Auto Weight", function(State)
    autoToggle = State
    print("Auto Lift & Equip toggle: " .. (State and "ON" or "OFF"))
    if State then
        task.spawn(function()
            print("Auto Lift & Equip starting...")
            while autoToggle do
                local character = player.Character
                if not character then
                    print("Auto Lift & Equip - Waiting for character...")
                    character = player.CharacterAdded:Wait()
                end

                if not character:FindFirstChild("Weight") then
                    equipWeight()
                end

                local muscleEvent = player:WaitForChild("muscleEvent", 5)
                if not muscleEvent then
                    warn("Auto Lift & Equip - muscleEvent not found! Stopping.")
                    autoToggle = false
                    break
                end

                local success, result = pcall(function()
                    return muscleEvent:FireServer("rep")
                end)
                if success then
                    if result then
                        print("Auto Lift & Equip - Rep successful!")
                    else
                        warn("Auto Lift & Equip - Rep failed: " .. tostring(result))
                    end
                else
                    warn("Auto Lift & Equip - Rep error: " .. tostring(result))
                end

                task.wait()
            end
            print("Auto Lift & Equip stopped")
        end)
    end
end)

player.CharacterAdded:Connect(function()
    if autoToggle then
        print("Character respawned - Auto equipping weight...")
        equipWeight()
    end
end)

-- Pack Farm Folder
local HttpService = game:GetService("HttpService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Players = game:GetService("Players")
local player = Players.LocalPlayer

local startTime = 0
local rebirthStartTime = 0
local startRebirths = 0
local hasStarted = false
local targetRebirth = math.huge

local packFarmTarget = false
local packFarmInfinite = false
local fastStrength = false

local function formatNumber(number)
    if number >= 1e15 then return string.format("%.2fQ", number/1e15)
    elseif number >= 1e12 then return string.format("%.2fT", number/1e12)
    elseif number >= 1e9 then return string.format("%.2fB", number/1e9)
    elseif number >= 1e6 then return string.format("%.2fM", number/1e6)
    elseif number >= 1e3 then return string.format("%.2fK", number/1e3)
    end
    return tostring(math.floor(number))
end

local function formatNumberWithCommas(number)
    local formatted = tostring(math.floor(number))
    local k
    while true do
        formatted, k = string.gsub(formatted, "^(-?%d+)(%d%d%d)", '%1,%2')
        if k == 0 then break end
    end
    return formatted
end

local function formatTime(seconds)
    local hours = math.floor(seconds / 3600)
    local minutes = math.floor((seconds % 3600) / 60)
    local secs = math.floor(seconds % 60)
    return string.format("%02d:%02d:%02d", hours, minutes, secs)
end

local packRebirthValues = {
    [0] = 1,  
    [1] = 2,  
    [2] = 4,  
    [3] = 6,  
    [4] = 8,  
    [5] = 10, 
    [6] = 12, 
    [7] = 14, 
    [8] = 16  
}

local function unequipAllPets()
    local petsFolder = player.petsFolder
    for _, folder in pairs(petsFolder:GetChildren()) do
        if folder:IsA("Folder") then
            for _, pet in pairs(folder:GetChildren()) do
                ReplicatedStorage.rEvents.equipPetEvent:FireServer("unequipPet", pet)
            end
        end
    end
    task.wait(0.1)
end

local function equipSpecificPacks(packName, count)
    unequipAllPets()
    task.wait(0.2)

    local packs = {}
    for _, pet in pairs(player.petsFolder.Unique:GetChildren()) do
        if pet.Name == packName then
            table.insert(packs, pet)
        end
    end

    local packsToEquip = math.min(count, #packs)
    for i = 1, packsToEquip do
        ReplicatedStorage.rEvents.equipPetEvent:FireServer("equipPet", packs[i])
        task.wait(0.1)
    end

    return packsToEquip
end

local function findMachine(machineName)
    local machine = workspace.machinesFolder:FindFirstChild(machineName)
    if not machine then
        for _, folder in pairs(workspace:GetChildren()) do
            if folder:IsA("Folder") and folder.Name:find("machines") then
                machine = folder:FindFirstChild(machineName)
                if machine then break end
            end
        end
    end
    return machine
end

local function pressE()
    local vim = game:GetService("VirtualInputManager")
    vim:SendKeyEvent(true, "E", false, game)
    task.wait(0.1)
    vim:SendKeyEvent(false, "E", false, game)
end

local isPositionLocked = false
local originalCFrame = nil
local function lockPosition(lock)
    isPositionLocked = lock

    if lock and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
        originalCFrame = player.Character.HumanoidRootPart.CFrame

        if not _G.positionConnection then
            _G.positionConnection = game:GetService("RunService").Heartbeat:Connect(function()
                if isPositionLocked and player.Character and player.Character:FindFirstChild("HumanoidRootPart") and originalCFrame then
                    player.Character.HumanoidRootPart.CFrame = originalCFrame
                    player.Character.HumanoidRootPart.Velocity = Vector3.new(0, 0, 0)
                    player.Character.HumanoidRootPart.RotVelocity = Vector3.new(0, 0, 0)
                end
            end)
        end
    elseif not lock and _G.positionConnection then
        _G.positionConnection:Disconnect()
        _G.positionConnection = nil
    end
end

local function calculateOptimalPacks(currentRebirths, targetRebirths)
    local rebirthsNeeded = targetRebirths - currentRebirths

    if rebirthsNeeded <= 0 then
        return 0
    end

    if rebirthsNeeded == 1 then
        return 0
    end

    for packCount = 1, 8 do
        if packRebirthValues[packCount] == rebirthsNeeded then
            return packCount
        end
    end

    for packCount = 8, 1, -1 do
        if packRebirthValues[packCount] < rebirthsNeeded then
            local remaining = rebirthsNeeded - packRebirthValues[packCount]

            if remaining == 1 then
                return packCount
            end

            for secondPackCount = 8, 0, -1 do
                if packRebirthValues[secondPackCount] == remaining then
                    return packCount
                end
            end

            return packCount
        end
    end

    return 0
end

-- Crear folder para Pack Farm
local PackFarmFolder = farmTab:AddFolder("  Packs Farm")

PackFarmFolder:AddTextBox("Target Rebirth Amount", function(text)
    local num = tonumber(text)
    if num then
        targetRebirth = num
    else
        targetRebirth = math.huge
    end
end)

local targetPackToggle = PackFarmFolder:AddSwitch("Pack Farm | Target", function(bool)
    packFarmTarget = bool

    if bool then
        if packFarmInfinite then
            packFarmInfinite = false
            infinitePackToggle:Set(false)
        end

        if fastStrength then
            fastStrength = false
            fastStrengthToggle:Set(false)
        end

        if targetRebirth ~= math.huge and targetRebirth > player.leaderstats.Rebirths.Value then
            task.spawn(function()
                lockPosition(true)

                while packFarmTarget do
                    local currentRebirths = player.leaderstats.Rebirths.Value

                    if currentRebirths >= targetRebirth then
                        packFarmTarget = false
                        targetPackToggle:Set(false)
                        lockPosition(false)
                        break
                    end

                    local rebirthCost = 10000 + (5000 * currentRebirths)
                    if player.ultimatesFolder:FindFirstChild("Golden Rebirth") then
                        local goldenRebirths = player.ultimatesFolder["Golden Rebirth"].Value
                        rebirthCost = math.floor(rebirthCost * (1 - (goldenRebirths * 0.1)))
                    end

                    local rebirthsNeeded = targetRebirth - currentRebirths

                    local packCount = 0

                    if rebirthsNeeded == 1 then
                        packCount = 0
                    else
                        for i = 8, 1, -1 do
                            if packRebirthValues[i] <= rebirthsNeeded then
                                packCount = i
                                break
                            end
                        end
                    end

                    equipSpecificPacks("Swift Samurai", 8)

                    while packFarmTarget and player.leaderstats.Strength.Value < rebirthCost do
                        for i = 1, 10 do
                            player.muscleEvent:FireServer("rep")
                        end
                        task.wait()
                    end

                    equipSpecificPacks("Tribal Overlord", packCount)

                    local machine = findMachine("Jungle Bar Lift")
                    if machine and machine:FindFirstChild("interactSeat") then
                        player.Character.HumanoidRootPart.CFrame = machine.interactSeat.CFrame * CFrame.new(0, 3, 0)
                        repeat
                            task.wait(0.1)
                            pressE()
                        until player.Character.Humanoid.Sit
                    end

                    local initialRebirths = player.leaderstats.Rebirths.Value
                    repeat
                        ReplicatedStorage.rEvents.rebirthRemote:InvokeServer("rebirthRequest")
                        task.wait(0.1)
                    until player.leaderstats.Rebirths.Value > initialRebirths

                    task.wait(0.5)
                end

                lockPosition(false)
                unequipAllPets()
            end)
        else
            packFarmTarget = false
            targetPackToggle:Set(false)
        end
    else
        lockPosition(false)
        unequipAllPets()
    end
end)

local infinitePackToggle = PackFarmFolder:AddSwitch("Pack Farm | Infinite", function(bool)
    packFarmInfinite = bool

    if bool then
        if packFarmTarget then
            packFarmTarget = false
            targetPackToggle:Set(false)
        end

        if fastStrength then
            fastStrength = false
            fastStrengthToggle:Set(false)
        end

        task.spawn(function()
            lockPosition(true)

            while packFarmInfinite do
                local currentRebirths = player.leaderstats.Rebirths.Value

                local rebirthCost = 10000 + (5000 * currentRebirths)
                if player.ultimatesFolder:FindFirstChild("Golden Rebirth") then
                    local goldenRebirths = player.ultimatesFolder["Golden Rebirth"].Value
                    rebirthCost = math.floor(rebirthCost * (1 - (goldenRebirths * 0.1)))
                end

                equipSpecificPacks("Swift Samurai", 8)

                while packFarmInfinite and player.leaderstats.Strength.Value < rebirthCost do
                    for i = 1, 10 do
                        player.muscleEvent:FireServer("rep")
                    end
                    task.wait()
                end

                equipSpecificPacks("Tribal Overlord", 8)

                local machine = findMachine("Jungle Bar Lift")
                if machine and machine:FindFirstChild("interactSeat") then
                    player.Character.HumanoidRootPart.CFrame = machine.interactSeat.CFrame * CFrame.new(0, 3, 0)
                    repeat
                        task.wait(0.1)
                        pressE()
                    until player.Character.Humanoid.Sit
                end

                local initialRebirths = player.leaderstats.Rebirths.Value
                repeat
                    ReplicatedStorage.rEvents.rebirthRemote:InvokeServer("rebirthRequest")
                    task.wait(0.1)
                until player.leaderstats.Rebirths.Value > initialRebirths

                task.wait(0.5)
            end

            lockPosition(false)
            unequipAllPets()
        end)
    else
        lockPosition(false)
        unequipAllPets()
    end
end)

local fastStrengthToggle = PackFarmFolder:AddSwitch("Pack Farm | Fast Strength", function(bool)
    fastStrength = bool

    if bool then
        if packFarmTarget then
            packFarmTarget = false
            targetPackToggle:Set(false)
        end

        if packFarmInfinite then
            packFarmInfinite = false
            infinitePackToggle:Set(false)
        end

        task.spawn(function()
            equipSpecificPacks("Swift Samurai", 8)

            while fastStrength do
                for i = 1, 10 do
                    player.muscleEvent:FireServer("rep")
                end
                task.wait()
            end
        end)
    else
        unequipAllPets()
    end
end)

local switch = PackFarmFolder:AddSwitch("Hide All Frames", function(state)
    local rSto = game:GetService("ReplicatedStorage")
    for _, obj in pairs(rSto:GetChildren()) do
        if obj.Name:match("Frame$") then
            obj.Visible = not state
        end
    end
end)

-- Misc 1 Folder
local misc1Folder = miscTab:AddFolder("  Misc 1")

local sizeValue = 2
local speedValue = 16
local autoSizeEnabled = false
local autoSpeedEnabled = false
local autoSizeConnection = nil
local autoSpeedConnection = nil

misc1Folder:AddTextBox("Auto Size", function(text)
    sizeValue = tonumber(text) or 2

    if autoSizeEnabled then
        pcall(function()
            game:GetService("ReplicatedStorage").rEvents.changeSpeedSizeRemote:InvokeServer("changeSize", sizeValue)
        end)
    end
end)

local autoSizeSwitch = misc1Folder:AddSwitch("Auto Set Size", function(bool)
    autoSizeEnabled = bool

    if autoSizeEnabled then
        spawn(function()
            while autoSizeEnabled do
                pcall(function()
                    game:GetService("ReplicatedStorage").rEvents.changeSpeedSizeRemote:InvokeServer("changeSize", sizeValue)
                end)
                wait(0.1)
            end
        end)
    end
end)

misc1Folder:AddTextBox("Auto Speed", function(text)
    speedValue = tonumber(text) or 16

    if player and player.Character and player.Character:FindFirstChild("Humanoid") then
        player.Character.Humanoid.WalkSpeed = speedValue
    end
end)

local autoSpeedSwitch = misc1Folder:AddSwitch("Auto Set Speed", function(bool)
    autoSpeedEnabled = bool

    if autoSpeedEnabled then
        if player and player.Character and player.Character:FindFirstChild("Humanoid") then
            player.Character.Humanoid.WalkSpeed = speedValue
        end

        if autoSpeedConnection then
            autoSpeedConnection:Disconnect()
        end

        autoSpeedConnection = player.CharacterAdded:Connect(function(character)
            local humanoid = character:WaitForChild("Humanoid")
            if humanoid then
                humanoid.WalkSpeed = speedValue
            end
        end)
    else
        if autoSpeedConnection then
            autoSpeedConnection:Disconnect()
            autoSpeedConnection = nil
        end
    end
end)

-- Folder Misc 2
local Misc2 = miscTab:AddFolder("  Misc 2")

-- Bot√≥n Infinite Yield
Misc2:AddButton("Infinite Yield", function()
    loadstring(game:HttpGet("https://raw.githubusercontent.com/EdgeIY/infiniteyield/master/source"))()
end)

-- Bot√≥n GhostX Hub
Misc2:AddButton("GhostX Hub", function()
    loadstring(game:HttpGet("https://scriptblox.com/raw/Universal-Script-GhostX-Hub-7158"))()
end)

local misc3Folder = miscTab:AddFolder("Misc 3")

-- Add No-Clip toggle
misc3Folder:AddSwitch("No-Clip", function(bool)
    _G.NoClip = bool
    
    if bool then
        local noclipLoop
        noclipLoop = game:GetService("RunService").Stepped:Connect(function()
            if _G.NoClip then
                for _, part in pairs(game.Players.LocalPlayer.Character:GetDescendants()) do
                    if part:IsA("BasePart") and part.CanCollide then
                        part.CanCollide = false
                    end
                end
            else
                noclipLoop:Disconnect()
            end
        end)
        
        game:GetService("StarterGui"):SetCore("SendNotification", {
            Title = "No-Clip Activado",
            Text = "Ahora puedes atravesar objetos",
            Duration = 0
        })
    end
end)

-- Add Infinite Jump toggle
misc3Folder:AddSwitch("Jump Infinite", function(bool)
    _G.InfiniteJump = bool
    
    if bool then
        local InfiniteJumpConnection
        InfiniteJumpConnection = game:GetService("UserInputService").JumpRequest:Connect(function()
            if _G.InfiniteJump then
                game:GetService("Players").LocalPlayer.Character:FindFirstChildOfClass("Humanoid"):ChangeState("Jumping")
            else
                InfiniteJumpConnection:Disconnect()
            end
        end)
        
        game:GetService("StarterGui"):SetCore("SendNotification", {
            Title = "Salto Infinito Activado",
            Text = "Ahora puedes saltar sin l√≠mites",
            Duration = 0
        })
    end
end)

local timeDropdown = misc3Folder:AddDropdown("Change Time", function(selection)
    local lighting = game:GetService("Lighting")
    
    -- Fix 1: Match the dropdown options with the actual strings being added
    if selection == "Night" then
        lighting.ClockTime = 0  -- Midnight (0:00)
    elseif selection == "Day" then
        lighting.ClockTime = 12  -- Noon (12:00)
    elseif selection == "Midnight" then
        lighting.ClockTime = 6   -- Dawn/Early morning (6:00)
    end
    
    -- Fix 2: Use pcall to handle potential errors with SetCore
    local success, error = pcall(function()
        game:GetService("StarterGui"):SetCore("SendNotification", {
            Title = "Time Changed",
            Text = "Time has been changed to: " .. selection,
            Duration = 3  -- Fix 3: Duration should not be 0
        })
    end)
    
    -- Optional: Print to console if notification fails
    if not success then
        print("Time changed to: " .. selection)
    end
end)

-- Add time options (these must match the strings in the callback function)
timeDropdown:Add("Night")
timeDropdown:Add("Day")
timeDropdown:Add("Midnight")


local antiAFKConnection
local function setupAntiAFK()
    if antiAFKConnection then
        antiAFKConnection:Disconnect()
    end
    antiAFKConnection = Player.Idled:Connect(function()
        VirtualUser:CaptureController()
        VirtualUser:ClickButton2(Vector2.new())
    end)
end
setupAntiAFK()

local function removePortals()
    for _, portal in pairs(game:GetDescendants()) do
        if portal.Name == "RobloxForwardPortals" then
            portal:Destroy()
        end
    end
    if _G.AdRemovalConnection then
        _G.AdRemovalConnection:Disconnect()
    end
    _G.AdRemovalConnection = game.DescendantAdded:Connect(function(descendant)
        if descendant.Name == "RobloxForwardPortals" then
            descendant:Destroy()
        end
    end)
end
removePortals()

-- Folder Misc 4 en miscTab
local Misc4 = miscTab:AddFolder("Misc 4")

Misc4:AddSwitch("Disable Trade", function(State)
    if State then
        game:GetService("ReplicatedStorage").rEvents.tradingEvent:FireServer("disableTrading")
    else
        game:GetService("ReplicatedStorage").rEvents.tradingEvent:FireServer("enableTrading")
    end
end)

Misc4:AddSwitch("Hide Pets", function(State)
    if State then
        game:GetService("ReplicatedStorage").rEvents.showPetsEvent:FireServer("hidePets")
    else
        game:GetService("ReplicatedStorage").rEvents.showPetsEvent:FireServer("showPets")
    end
end)

