local DrRayLibrary = loadstring(game:HttpGet("https://raw.githubusercontent.com/AZYsGithub/DrRay-UI-Library/main/DrRay.lua"))()
local window = DrRayLibrary:Load("Sherya Script", "Default")

local Killing = window:Tab("Killer", "rbxasset://textures/ui/GuiImagePlaceholder.png")

-- Pet Selection
local dropdown = Killing:Dropdown("Select Pet", {"Wild Wizard", "Mighty Monster"}, function(selected)
    local petsFolder = game.Players.LocalPlayer.petsFolder
    for _, folder in pairs(petsFolder:GetChildren()) do
        if folder:IsA("Folder") then
            for _, pet in pairs(folder:GetChildren()) do
                game:GetService("ReplicatedStorage").rEvents.equipPetEvent:FireServer("unequipPet", pet)
            end
        end
    end
    task.wait(0.2)

    local petName = selected
    local petsToEquip = {}

    for _, pet in pairs(game.Players.LocalPlayer.petsFolder.Unique:GetChildren()) do
        if pet.Name == petName then
            table.insert(petsToEquip, pet)
        end
    end

    local maxPets = 8
    local equippedCount = math.min(#petsToEquip, maxPets)

    for i = 1, equippedCount do
        game:GetService("ReplicatedStorage").rEvents.equipPetEvent:FireServer("equipPet", petsToEquip[i])
        task.wait(0.1)
    end
end)

-- Remove Attack Animations
Killing:Button("Remove Attack Animations", function()
    local blockedAnimations = {
        ["rbxassetid://3638729053"] = true,
        ["rbxassetid://3638767427"] = true,
    }

    local function setupAnimationBlocking()
        local char = game.Players.LocalPlayer.Character
        if not char or not char:FindFirstChild("Humanoid") then return end

        local humanoid = char:FindFirstChild("Humanoid")

        for _, track in pairs(humanoid:GetPlayingAnimationTracks()) do
            if track.Animation then
                local animId = track.Animation.AnimationId
                local animName = track.Name:lower()

                if blockedAnimations[animId] or
                    animName:match("punch") or
                    animName:match("attack") or
                    animName:match("right") then
                    track:Stop()
                end
            end
        end

        if not _G.AnimBlockConnection then
            local connection = humanoid.AnimationPlayed:Connect(function(track)
                if track.Animation then
                    local animId = track.Animation.AnimationId
                    local animName = track.Name:lower()

                    if blockedAnimations[animId] or
                        animName:match("punch") or
                        animName:match("attack") or
                        animName:match("right") then
                        track:Stop()
                    end
                end
            end)

            _G.AnimBlockConnection = connection
        end
    end

    setupAnimationBlocking()

    local function overrideToolActivation()
        local function processTool(tool)
            if tool and (tool.Name == "Punch" or tool.Name:match("Attack") or tool.Name:match("Right")) then
                if not tool:GetAttribute("ActivatedOverride") then
                    tool:SetAttribute("ActivatedOverride", true)

                    local connection = tool.Activated:Connect(function()
                        task.wait(0.05)

                        local char = game.Players.LocalPlayer.Character
                        if char and char:FindFirstChild("Humanoid") then
                            for _, track in pairs(char.Humanoid:GetPlayingAnimationTracks()) do
                                if track.Animation then
                                    local animId = track.Animation.AnimationId
                                    local animName = track.Name:lower()

                                    if blockedAnimations[animId] or
                                        animName:match("punch") or
                                        animName:match("attack") or
                                        animName:match("right") then
                                        track:Stop()
                                    end
                                end
                            end
                        end
                    end)

                    if not _G.ToolConnections then
                        _G.ToolConnections = {}
                    end
                    _G.ToolConnections[tool] = connection
                end
            end
        end

        for _, tool in pairs(game.Players.LocalPlayer.Backpack:GetChildren()) do
            processTool(tool)
        end

        local char = game.Players.LocalPlayer.Character
        if char then
            for _, tool in pairs(char:GetChildren()) do
                if tool:IsA("Tool") then
                    processTool(tool)
                end
            end
        end

        if not _G.BackpackAddedConnection then
            _G.BackpackAddedConnection = game.Players.LocalPlayer.Backpack.ChildAdded:Connect(function(child)
                if child:IsA("Tool") then
                    task.wait(0.1)
                    processTool(child)
                end
            end)
        end

        if not _G.CharacterToolAddedConnection and char then
            _G.CharacterToolAddedConnection = char.ChildAdded:Connect(function(child)
                if child:IsA("Tool") then
                    task.wait(0.1)
                    processTool(child)
                end
            end)
        end
    end

    overrideToolActivation()

    if not _G.AnimMonitorConnection then
        _G.AnimMonitorConnection = game:GetService("RunService").Heartbeat:Connect(function()
            if tick() % 0.5 < 0.01 then
                local char = game.Players.LocalPlayer.Character
                if char and char:FindFirstChild("Humanoid") then
                    for _, track in pairs(char.Humanoid:GetPlayingAnimationTracks()) do
                        if track.Animation then
                            local animId = track.Animation.AnimationId
                            local animName = track.Name:lower()

                            if blockedAnimations[animId] or
                                animName:match("punch") or
                                animName:match("attack") or
                                animName:match("right") then
                                track:Stop()
                            end
                        end
                    end
                end
            end
        end)
    end

    if not _G.CharacterAddedConnection then
        _G.CharacterAddedConnection = game.Players.LocalPlayer.CharacterAdded:Connect(function(newChar)
            task.wait(1)
            setupAnimationBlocking()
            overrideToolActivation()

            if _G.CharacterToolAddedConnection then
                _G.CharacterToolAddedConnection:Disconnect()
            end

            _G.CharacterToolAddedConnection = newChar.ChildAdded:Connect(function(child)
                if child:IsA("Tool") then
                    task.wait(0.1)
                    processTool(child)
                end
            end)
        end)
    end
end)

-- Restore Punch Animation
Killing:Button("Restore Punch Animation", function()
    if _G.AnimBlockConnection then
        _G.AnimBlockConnection:Disconnect()
        _G.AnimBlockConnection = nil

        local char = game.Players.LocalPlayer.Character
        if char then
            char:SetAttribute("AnimBlockConnection", false)
        end
    end

    if _G.AnimMonitorConnection then
        _G.AnimMonitorConnection:Disconnect()
        _G.AnimMonitorConnection = nil
    end

    if _G.ToolConnections then
        for tool, connection in pairs(_G.ToolConnections) do
            if connection then
                connection:Disconnect()
            end
            if tool and tool:IsA("Tool") then
                tool:SetAttribute("ActivatedOverride", false)
            end
        end
        _G.ToolConnections = {}
    end
end)

-- Initialize whitelist
_G.whitelistedPlayers = _G.whitelistedPlayers or {}
if not table.find(_G.whitelistedPlayers, "MissSherya") then
    table.insert(_G.whitelistedPlayers, "MissSherya")
end

-- Whitelist TextBox
Killing:Textbox("Whitelist Player", "Enter player name", function(text)
    if text and text ~= "" then
        local textLower = text:lower()

        local alreadyWhitelisted = false
        for _, name in ipairs(_G.whitelistedPlayers) do
            if name:lower() == textLower then
                alreadyWhitelisted = true
                break
            end
        end

        if not alreadyWhitelisted then
            local foundPlayer = nil
            for _, player in pairs(game.Players:GetPlayers()) do
                if player.Name:lower() == textLower or player.DisplayName:lower() == textLower then
                    foundPlayer = player
                    break
                end
            end

            if foundPlayer then
                table.insert(_G.whitelistedPlayers, foundPlayer.Name)
            else
                table.insert(_G.whitelistedPlayers, text)
            end
        end
    end
end)

-- Whitelist functions
function isWhitelisted(player)
    if typeof(player) == "Instance" and player:IsA("Player") and player.Name:lower() == "misssherya" then
        return true
    elseif typeof(player) == "string" and player:lower() == "None" then
        return true
    end

    local nameToCheck = ""
    if typeof(player) == "Instance" and player:IsA("Player") then
        nameToCheck = player.Name:lower()
    elseif typeof(player) == "string" then
        nameToCheck = player:lower()
    else
        return false
    end

    for _, name in ipairs(_G.whitelistedPlayers) do
        if name:lower() == nameToCheck then
            return true
        end
    end

    return false
end

-- Clear Whitelist
Killing:Button("Clear Whitelist", function()
    _G.whitelistedPlayers = {}

    if not table.find(_G.whitelistedPlayers, "MissSherya") then
        table.insert(_G.whitelistedPlayers, "MissSherya")
    end
end)

-- Whitelist Friends Toggle
Killing:Toggle("Whitelist Friends", false, function(bool)
    _G.whitelistFriends = bool

    if bool then
        for _, player in pairs(game.Players:GetPlayers()) do
            if player ~= game.Players.LocalPlayer and player:IsFriendsWith(game.Players.LocalPlayer.UserId) then
                local playerName = player.Name

                local alreadyWhitelisted = false
                for _, name in ipairs(_G.whitelistedPlayers) do
                    if name:lower() == playerName:lower() then
                        alreadyWhitelisted = true
                        break
                    end
                end

                if not alreadyWhitelisted then
                    table.insert(_G.whitelistedPlayers, playerName)
                end
            end
        end
    end
end)

-- Player added event for friend whitelisting
game.Players.PlayerAdded:Connect(function(player)
    if _G.whitelistFriends and player:IsFriendsWith(game.Players.LocalPlayer.UserId) then
        local playerName = player.Name

        local alreadyWhitelisted = false
        for _, name in ipairs(_G.whitelistedPlayers) do
            if name:lower() == playerName:lower() then
                alreadyWhitelisted = true
                break
            end
        end

        if not alreadyWhitelisted then
            table.insert(_G.whitelistedPlayers, playerName)
        end
    end
end)

-- Utility functions
local function checkCharacter()
    if not game.Players.LocalPlayer.Character then
        repeat
            task.wait()
        until game.Players.LocalPlayer.Character
    end
    return game.Players.LocalPlayer.Character
end

local function gettool()
    for i, v in pairs(game.Players.LocalPlayer.Backpack:GetChildren()) do
        if v.Name == "Punch" and game.Players.LocalPlayer.Character:FindFirstChild("Humanoid") then
            game.Players.LocalPlayer.Character.Humanoid:EquipTool(v)
        end
    end
    game:GetService("Players").LocalPlayer.muscleEvent:FireServer("punch", "leftHand")
    game:GetService("Players").LocalPlayer.muscleEvent:FireServer("punch", "rightHand")
end

local function isPlayerAlive(player)
    return player and player.Character and 
            player.Character:FindFirstChild("HumanoidRootPart") and
            player.Character:FindFirstChild("Humanoid") and
            player.Character.Humanoid.Health > 0
end

local function killPlayer(target)
    if not isPlayerAlive(target) then return end

    local character = checkCharacter()
    if character and character:FindFirstChild("LeftHand") then
        pcall(function()
            firetouchinterest(target.Character.HumanoidRootPart, character.LeftHand, 0)
            firetouchinterest(target.Character.HumanoidRootPart, character.LeftHand, 1)
            gettool()
        end)
    end
end

local function isWhitelistedKill(player)
    for _, whitelistedInfo in ipairs(_G.whitelistedPlayers) do
        if whitelistedInfo:find(player.Name, 1, true) then
            return true
        end
    end
    return false
end

-- Auto Kill Everyone Toggle
Killing:Toggle("Auto Kill Everyone", false, function(bool)
    _G.killAll = bool

    if bool then
        if not _G.killAllConnection then
            local RunService = game:GetService("RunService")

            _G.killAllConnection = RunService.Heartbeat:Connect(function()
                if _G.killAll then
                    for _, player in ipairs(game:GetService("Players"):GetPlayers()) do
                        if player ~= game.Players.LocalPlayer and not isWhitelistedKill(player) then
                            killPlayer(player)
                        end
                    end
                end
            end)
        end
    else
        if _G.killAllConnection then
            _G.killAllConnection:Disconnect()
            _G.killAllConnection = nil
        end
    end
end)

-- Character events for kill all
game:GetService("Players").LocalPlayer.CharacterRemoving:Connect(function()
    if _G.killAllConnection then
        _G.killAllConnection:Disconnect()
        _G.killAllConnection = nil
    end
end)

game:GetService("Players").LocalPlayer.CharacterAdded:Connect(function()
    if _G.killAll and not _G.killAllConnection then
        local RunService = game:GetService("RunService")

        _G.killAllConnection = RunService.Heartbeat:Connect(function()
            if _G.killAll then
                for _, player in ipairs(game:GetService("Players"):GetPlayers()) do
                    if player ~= game.Players.LocalPlayer and not isWhitelistedKill(player) then
                        killPlayer(player)
                    end
                end
            end
        end)
    end
end)

-- Initialize variables for karma killing
_G.deathRingEnabled = false
_G.deathRingRange = 20
_G.targetPlayer = nil
_G.killPlayerEnabled = false

local function findPlayerByName(name)
    if not name or name == "" then return nil end

    name = name:lower()
    for _, player in pairs(game.Players:GetPlayers()) do
        if player.Name:lower():find(name, 1, true) or player.DisplayName:lower():find(name, 1, true) then
            return player
        end
    end
    return nil
end

-- Karma Kill functions
function evilKarmaKill(state)
    getgenv().killEvil = state
    if state then
        equipTool("Punch")
        task.spawn(function()
            while getgenv().killEvil do
                local character = game.Players.LocalPlayer.Character
                local leftHand = character and character:FindFirstChild("LeftHand")
                if not leftHand then
                    task.wait(0.3)
                end
                local muscleEvent = game.Players.LocalPlayer:FindFirstChild("muscleEvent")
                if muscleEvent then
                    muscleEvent:FireServer("punch", "rightHand")
                    muscleEvent:FireServer("punch", "leftHand")
                end
                for _, player in pairs(game.Players:GetPlayers()) do
                    if player ~= game.Players.LocalPlayer then
                        local goodKarma = player:FindFirstChild("goodKarma")
                        local evilKarma = player:FindFirstChild("evilKarma")
                        if goodKarma and evilKarma and evilKarma.Value > goodKarma.Value then
                            local targetChar = player.Character
                            local head = targetChar and targetChar:FindFirstChild("Head")
                            if head then
                                head.CFrame = leftHand.CFrame
                                for _, part in pairs(targetChar:GetDescendants()) do
                                    if part:IsA("BasePart") and part.Name == "Handle" then
                                        part.CFrame = leftHand.CFrame
                                    end
                                end
                                local sweatPart = targetChar:FindFirstChild("sweatPart")
                                if sweatPart then
                                    sweatPart.CFrame = leftHand.CFrame
                                end
                            end
                        end
                    end
                end
                task.wait(0.1)
            end
        end)
    end
end

function goodKarmaKill(state)
    getgenv().killGood = state
    if state then
        equipTool("Punch")
        task.spawn(function()
            while getgenv().killGood do
                local character = game.Players.LocalPlayer.Character
                local leftHand = character and character:FindFirstChild("LeftHand")
                if not leftHand then
                    task.wait(0.3)
                end
                local muscleEvent = game.Players.LocalPlayer:FindFirstChild("muscleEvent")
                if muscleEvent then
                    muscleEvent:FireServer("punch", "rightHand")
                    muscleEvent:FireServer("punch", "leftHand")
                end
                for _, player in pairs(game.Players:GetPlayers()) do
                    if player ~= game.Players.LocalPlayer then
                        local goodKarma = player:FindFirstChild("goodKarma")
                        local evilKarma = player:FindFirstChild("evilKarma")
                        if goodKarma and evilKarma and goodKarma.Value > evilKarma.Value then
                            local targetChar = player.Character
                            local head = targetChar and targetChar:FindFirstChild("Head")
                            if head then
                                head.CFrame = leftHand.CFrame
                                for _, part in pairs(targetChar:GetDescendants()) do
                                    if part:IsA("BasePart") and part.Name == "Handle" then
                                        part.CFrame = leftHand.CFrame
                                    end
                                end
                                local sweatPart = targetChar:FindFirstChild("sweatPart")
                                if sweatPart then
                                    sweatPart.CFrame = leftHand.CFrame
                                end
                            end
                        end
                    end
                end
                task.wait(0.1)
            end
        end)
    end
end

function equipTool(toolName)
    local character = game.Players.LocalPlayer.Character
    local backpack = game.Players.LocalPlayer.Backpack
    if not (character and backpack) then return end
    local tool = backpack:FindFirstChild(toolName)
    if tool then
        local humanoid = character:FindFirstChildOfClass("Humanoid")
        if humanoid then
            humanoid:EquipTool(tool)
        end
    end
end

-- Good Karma Kill Toggle
Killing:Toggle("Good Karma Kill", false, function(state)
    evilKarmaKill(state)
end)

-- Evil Karma Kill Toggle
Killing:Toggle("Evil Karma Kill", false, function(state)
    goodKarmaKill(state)
end)

-- Punch Death Toggle (All Active)
Killing:Toggle("Punch Death (Egg Obligatorio)", false, function(value)
    allActive = value

    local Players = game:GetService("Players")
    local player = Players.LocalPlayer
    local RunService = game:GetService("RunService")
    local StarterPack = game:GetService("StarterPack")
    local ReplicatedStorage = game:GetService("ReplicatedStorage")
    local lighting = game:GetService("Lighting")

    -- Clear previous connections
    for _, conn in pairs(connections or {}) do
        if conn and conn.Disconnect then
            conn:Disconnect()
        elseif typeof(conn) == "RBXScriptConnection" then
            conn:Disconnect()
        end
    end
    connections = {}

    if value then
        -- Auto Punch
        _G.AutoPunchToggle = true
        spawn(function()
            local backpack = player:WaitForChild("Backpack")
            local character = player.Character or player.CharacterAdded:Wait()
            local hand = "rightHand"

            local function getMuscleEvent()
                return player:FindFirstChild("muscleEvent")
            end

            player.CharacterAdded:Connect(function(char)
                character = char
            end)

            player.ChildAdded:Connect(function(child)
                if child.Name == "Backpack" then
                    backpack = child
                end
            end)

            while _G.AutoPunchToggle do
                local muscleEvent = getMuscleEvent()
                character = player.Character
                if character and character:FindFirstChild("Humanoid") and muscleEvent then
                    local punchEquipped = character:FindFirstChild("Punch")
                    local punchInBackpack = backpack:FindFirstChild("Punch")

                    if not punchEquipped and punchInBackpack then
                        character.Humanoid:EquipTool(punchInBackpack)
                    end

                    muscleEvent:FireServer("punch", hand)
                end
                task.wait(0.0001)
            end
        end)

        -- Auto Protein Egg
        _G.AutoProteinEgg = true
        local toolName = "Protein Egg"
        local character = player.Character or player.CharacterAdded:Wait()

        local function restoreVisibility(tool)
            for _, part in ipairs(tool:GetDescendants()) do
                if part:IsA("BasePart") then
                    part.Transparency = 0
                    pcall(function() part.LocalTransparencyModifier = 0 end)
                end
            end
        end

        local function findTool()
            local tool = player.Backpack:FindFirstChild(toolName)
            if tool then return tool end
            tool = StarterPack:FindFirstChild(toolName)
            if tool then return tool end
            tool = ReplicatedStorage:FindFirstChild(toolName)
            return tool
        end

        local function forceEquip(tool)
            if not (character and character:FindFirstChild("Humanoid")) then return end
            local success, err = pcall(function()
                character.Humanoid:EquipTool(tool)
            end)
            task.wait(0.1)

            if not character:FindFirstChild(toolName) then
                tool.Parent = character
                task.wait(0.1)
            end

            local equipped = character:FindFirstChild(toolName)
            if equipped then
                restoreVisibility(equipped)
            end
        end

        local function equipIfNeeded()
            if not _G.AutoProteinEgg or not character then return end

            local equipped = character:FindFirstChild(toolName)
            local needEquip = false

            if not equipped then
                needEquip = true
            else
                for _, part in ipairs(equipped:GetDescendants()) do
                    if part:IsA("BasePart") and part.Transparency > 0 then
                        needEquip = true
                        break
                    end
                end
            end

            if needEquip then
                local tool = findTool()
                if tool then
                    if tool.Parent ~= player.Backpack then
                        local clone = tool:Clone()
                        clone.Parent = player.Backpack
                        tool = clone
                    end
                    forceEquip(tool)
                end
            end
        end

        player.CharacterAdded:Connect(function(char)
            character = char
            task.wait(1)
            equipIfNeeded()
        end)

        player.Backpack.ChildAdded:Connect(function(child)
            if _G.AutoProteinEgg and child.Name == toolName then
                task.wait(0.2)
                equipIfNeeded()
            end
        end)

        spawn(function()
            while _G.AutoProteinEgg do
                equipIfNeeded()
                task.wait(0.5)
            end
        end)

        -- Anti Fly
        getgenv().AntiFlyActive = true

        connections.AntiFly = RunService.Heartbeat:Connect(function()
            local char = player.Character
            if not char then return end
            local root = char:FindFirstChild("HumanoidRootPart")
            if not root then return end
            local humanoid = char:FindFirstChildOfClass("Humanoid")
            if not humanoid then return end

            local ray = Ray.new(root.Position, Vector3.new(0, -500, 0))
            local hit, position = workspace:FindPartOnRay(ray, char)

            if hit then
                local groundY = position.Y
                local currentY = root.Position.Y
                if currentY - groundY > 0.5 then
                    root.CFrame = CFrame.new(root.Position.X, groundY + 0.5, root.Position.Z)
                    humanoid.PlatformStand = true
                    humanoid.PlatformStand = false
                end
            end
        end)

        -- Anti Lag
        local function softAntiLag()
            local classesToClean = {
                ["ParticleEmitter"] = true,
                ["Trail"] = true,
                ["Smoke"] = true,
                ["Fire"] = true
            }

            for _, obj in ipairs(workspace:GetChildren()) do
                if obj:IsA("Model") or obj:IsA("Part") then
                    for _, sub in ipairs(obj:GetChildren()) do
                        if classesToClean[sub.ClassName] then
                            pcall(function()
                                sub:Destroy()
                            end)
                        end
                    end
                end
            end

            local terrain = workspace:FindFirstChildOfClass("Terrain")
            if terrain then
                terrain.WaterWaveSize = 0
                terrain.WaterReflectance = 0
                terrain.WaterTransparency = 1
            end
        end

        local function setSunsetSky()
            lighting.ClockTime = 18
            lighting.Brightness = 1.5
            lighting.OutdoorAmbient = Color3.fromRGB(150, 100, 80)
            lighting.FogColor = Color3.fromRGB(200, 120, 100)
            lighting.FogEnd = 500

            for _, v in ipairs(lighting:GetChildren()) do
                if v:IsA("Sky") then
                    v:Destroy()
                end
            end

            local sky = Instance.new("Sky")
            sky.Name = "SunsetSky"
            sky.SkyboxBk = "rbxassetid://131889017"
            sky.SkyboxDn = "rbxassetid://131889017"
            sky.SkyboxFt = "rbxassetid://131889017"
            sky.SkyboxLf = "rbxassetid://131889017"
            sky.SkyboxRt = "rbxassetid://131889017"
            sky.SkyboxUp = "rbxassetid://131889017"
            sky.SunAngularSize = 10
            sky.MoonAngularSize = 0
            sky.SunTextureId = "rbxassetid://644432992"
            sky.Parent = lighting
        end

        softAntiLag()
        setSunsetSky()

        -- Auto Tropical Shake
        spawn(function()
            local backpack = player:WaitForChild("Backpack")
            while allActive do
                local shake = backpack:FindFirstChild("Tropical Shake")
                if not shake then
                    break
                end

                shake.Parent = player.Character
                RunService.Heartbeat:Wait()

                if shake.Activate then
                    shake:Activate()
                elseif mouse1click then
                    mouse1click()
                end

                task.wait(0.1)
            end
        end)
    else
        _G.AutoPunchToggle = false
        _G.AutoProteinEgg = false
        getgenv().AntiFlyActive = false

        if connections.AntiFly then
            connections.AntiFly:Disconnect()
            connections.AntiFly = nil
        end
    end
end)

-- Death Ring Range TextBox
Killing:Textbox("Death Ring Range", "1-140", function(text)
    local range = tonumber(text)
    if range then
        range = math.clamp(range, 1, 140)
        _G.deathRingRange = range
    end
end)

-- Death Ring Toggle
Killing:Toggle("Death Ring", false, function(bool)
    _G.deathRingEnabled = bool

    if bool then
        if not _G.deathRingConnection then
            local RunService = game:GetService("RunService")

            _G.deathRingConnection = RunService.Heartbeat:Connect(function()
                if not _G.deathRingEnabled then return end

                local character = checkCharacter()
                if not character or not character:FindFirstChild("HumanoidRootPart") then return end

                local myPosition = character.HumanoidRootPart.Position

                for _, player in ipairs(game:GetService("Players"):GetPlayers()) do
                    if player == game.Players.LocalPlayer or isWhitelisted(player) then
                        continue
                    end

                    if isPlayerAlive(player) then
                        local playerPosition = player.Character.HumanoidRootPart.Position
                        local distance = (myPosition - playerPosition).Magnitude

                        if distance <= _G.deathRingRange then
                            killPlayer(player)
                        end
                    end
                end
            end)
        end
    else
        if _G.deathRingConnection then
            _G.deathRingConnection:Disconnect()
            _G.deathRingConnection = nil
        end
    end
end)

-- Kill Specific Player TextBox
Killing:Textbox("Kill Specific Player", "Enter player name", function(text)
    if text and text ~= "" then
        local player = findPlayerByName(text)
        if player then
            _
